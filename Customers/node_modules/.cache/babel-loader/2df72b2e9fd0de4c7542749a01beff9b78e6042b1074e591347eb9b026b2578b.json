{"ast":null,"code":"import axios from \"axios\";\nimport { createUrl, log } from \"../utils/utils\";\nexport async function getBranchList() {\n  const url = createUrl(\"/branch/all\");\n  try {\n    // get the current user's token from session storage\n    // const { token } = sessionStorage\n\n    // // create a header to send the token\n    // const header = {\n    //   headers: {\n    //     token,\n    //   },\n    // }\n\n    // make the api call using the token in the header\n    const response = await axios.get(url);\n    log(response.data);\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}\nexport async function updateBranch(branchName) {\n  const url = createUrl(\"/branch/update\");\n  const body = {\n    bra\n  };\n\n  // wait till axios is making the api call and getting response from server\n  try {\n    const response = await axios.put(url, body);\n    log(response.data);\n    // console.log(response.data)\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}\nexport async function addBranch(branchName, branchCode, branchLocation, branchManager) {\n  const url = createUrl(\"/branch/add\");\n  const body = {\n    branchName,\n    branchCode,\n    branchLocation,\n    branchManager\n  };\n\n  // wait till axios is making the api call and getting response from server\n  try {\n    const response = await axios.post(url, body);\n    log(response.data);\n    // console.log(response.data)\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}\nexport async function editbranchDetails(branchId) {\n  const url = createUrl(`/branch/${branchId}`);\n\n  // wait till axios is making the api call and getting response from server\n  try {\n    const response = await axios.get(url);\n    log(response.data);\n    // console.log(response.data)\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}","map":{"version":3,"names":["axios","createUrl","log","getBranchList","url","response","get","data","ex","updateBranch","branchName","body","bra","put","addBranch","branchCode","branchLocation","branchManager","post","editbranchDetails","branchId"],"sources":["/home/abhishek/Courier Service Management/Courier/Emp/src/services/branch.js"],"sourcesContent":["import axios from \"axios\";\nimport { createUrl, log } from \"../utils/utils\";\n\nexport async function getBranchList() {\n  const url = createUrl(\"/branch/all\");\n\n  try {\n    // get the current user's token from session storage\n    // const { token } = sessionStorage\n\n    // // create a header to send the token\n    // const header = {\n    //   headers: {\n    //     token,\n    //   },\n    // }\n\n    // make the api call using the token in the header\n    const response = await axios.get(url);\n    log(response.data);\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}\n\nexport async function updateBranch(\n branchName\n) {\n  const url = createUrl(\"/branch/update\");\n\n  const body = {\n   bra\n  };\n\n  // wait till axios is making the api call and getting response from server\n  try {\n    const response = await axios.put(url, body);\n    log(response.data);\n    // console.log(response.data)\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}\n\nexport async function addBranch(\n  branchName,\n  branchCode,\n  branchLocation,\n  branchManager\n) {\n  const url = createUrl(\"/branch/add\");\n\n  const body = {\n    branchName,\n    branchCode,\n    branchLocation,\n    branchManager,\n  };\n\n  // wait till axios is making the api call and getting response from server\n  try {\n    const response = await axios.post(url, body);\n    log(response.data);\n    // console.log(response.data)\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}\n\nexport async function editbranchDetails(branchId) {\n  const url = createUrl(`/branch/${branchId}`);\n\n  // wait till axios is making the api call and getting response from server\n  try {\n    const response = await axios.get(url);\n    log(response.data);\n    // console.log(response.data)\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,GAAG,QAAQ,gBAAgB;AAE/C,OAAO,eAAeC,aAAaA,CAAA,EAAG;EACpC,MAAMC,GAAG,GAAGH,SAAS,CAAC,aAAa,CAAC;EAEpC,IAAI;IACF;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA,MAAMI,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAACF,GAAG,CAAC;IACrCF,GAAG,CAACG,QAAQ,CAACE,IAAI,CAAC;IAClB,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,EAAE,EAAE;IACXN,GAAG,CAACM,EAAE,CAAC;IACP,OAAO,IAAI;EACb;AACF;AAEA,OAAO,eAAeC,YAAYA,CACjCC,UAAU,EACT;EACA,MAAMN,GAAG,GAAGH,SAAS,CAAC,gBAAgB,CAAC;EAEvC,MAAMU,IAAI,GAAG;IACZC;EACD,CAAC;;EAED;EACA,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAML,KAAK,CAACa,GAAG,CAACT,GAAG,EAAEO,IAAI,CAAC;IAC3CT,GAAG,CAACG,QAAQ,CAACE,IAAI,CAAC;IAClB;IACA,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,EAAE,EAAE;IACXN,GAAG,CAACM,EAAE,CAAC;IACP,OAAO,IAAI;EACb;AACF;AAEA,OAAO,eAAeM,SAASA,CAC7BJ,UAAU,EACVK,UAAU,EACVC,cAAc,EACdC,aAAa,EACb;EACA,MAAMb,GAAG,GAAGH,SAAS,CAAC,aAAa,CAAC;EAEpC,MAAMU,IAAI,GAAG;IACXD,UAAU;IACVK,UAAU;IACVC,cAAc;IACdC;EACF,CAAC;;EAED;EACA,IAAI;IACF,MAAMZ,QAAQ,GAAG,MAAML,KAAK,CAACkB,IAAI,CAACd,GAAG,EAAEO,IAAI,CAAC;IAC5CT,GAAG,CAACG,QAAQ,CAACE,IAAI,CAAC;IAClB;IACA,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,EAAE,EAAE;IACXN,GAAG,CAACM,EAAE,CAAC;IACP,OAAO,IAAI;EACb;AACF;AAEA,OAAO,eAAeW,iBAAiBA,CAACC,QAAQ,EAAE;EAChD,MAAMhB,GAAG,GAAGH,SAAS,CAAE,WAAUmB,QAAS,EAAC,CAAC;;EAE5C;EACA,IAAI;IACF,MAAMf,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAG,CAACF,GAAG,CAAC;IACrCF,GAAG,CAACG,QAAQ,CAACE,IAAI,CAAC;IAClB;IACA,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,EAAE,EAAE;IACXN,GAAG,CAACM,EAAE,CAAC;IACP,OAAO,IAAI;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}