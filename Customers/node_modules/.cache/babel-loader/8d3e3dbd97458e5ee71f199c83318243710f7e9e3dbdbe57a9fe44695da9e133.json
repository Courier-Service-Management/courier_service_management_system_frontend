{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport './common.css';\nimport { useHistory } from 'react-router-dom';\nimport image from './images/bann5.jpg';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login(props) {\n  _s();\n  const [credentials, setcredentials] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const [message, setmessage] = useState(\"\");\n  const history = useHistory();\n  useEffect(() => {\n    if (message !== \"\") {\n      setTimeout(() => {\n        setmessage(\"\");\n      }, 3000);\n    }\n  }, [message]);\n  const OnTextChange = args => {\n    var copyOfcredentials = {\n      ...credentials\n    };\n    copyOfcredentials[args.target.name] = args.target.value;\n    setcredentials(copyOfcredentials);\n  };\n  const SignIn = () => {\n    debugger;\n    if (credentials.role == \"Customers\") {\n      history.push(\"/customer\");\n    } else if (credentials.role == \"Admin\") {\n      history.push(\"/admin\");\n    } else {\n      setmessage(\"credetials are invalid\");\n    }\n    // var helper=new XMLHttpRequest();\n    // helper.onreadystatechange=()=>{\n    //     if(helper.readyState===4 && helper.status===200)\n    //     {\n    //         var responseReceived=JSON.parse(helper.responseText);\n    //         if(responseReceived.isvalid==='true')\n    //         {\n    //             sessionStorage.setItem(\"isloggedin\",true);\n    //             sessionStorage.setItem(\"username\",credentials.username);\n    //             props.setUserName(credentials.username);\n\n    //             history.push(\"/\");\n    //         }\n    //         else{\n    //             setmessage(\"credentials are invalid\");\n    //             setcredentials({username:\"\",password:\"\"});\n    //         }\n    //     }\n    // }\n    // helper.open(\"POST\",\"http://127.0.0.1:9999/login\");\n    // helper.setRequestHeader(\"Content-Type\",\"application/json\");\n    // var credentialsInString=JSON.stringify(credentials);\n    // var credentialsInEncoded=window.btoa(credentialsInString);\n    // var details={\"credentials\":credentialsInEncoded}\n    // helper.send(JSON.stringify(details));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n_s(Login, \"2fGhSnoBc5HMVZ1eW/cHcO8/fTg=\", false, function () {\n  return [useHistory];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["useEffect","useState","useHistory","image","Fragment","_Fragment","jsxDEV","_jsxDEV","Login","props","_s","credentials","setcredentials","username","password","message","setmessage","history","setTimeout","OnTextChange","args","copyOfcredentials","target","name","value","SignIn","role","push","_c","$RefreshReg$"],"sources":["/home/abhishek/Courier Service Management/Courier/demo01 /src/Login.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport '../node_modules/bootstrap/dist/css/bootstrap.css';\nimport './common.css'\nimport { useHistory } from 'react-router-dom';\nimport image from './images/bann5.jpg';\n\n\n\nfunction Login(props)\n{\n    const [credentials, setcredentials]=useState({username:\"\",password:\"\"});\n    const [message, setmessage]=useState(\"\");\n    const history =useHistory();\n     \n    useEffect(()=>{\n        if(message!==\"\")\n        {\n            setTimeout(()=>{\n                setmessage(\"\");\n            },3000);\n        }\n    },[message])\n\n    const OnTextChange=(args)=>{\n        var copyOfcredentials={...credentials};\n        copyOfcredentials[args.target.name]=args.target.value;\n        setcredentials(copyOfcredentials);\n    }\n\n    const SignIn=()=>{\n\n    debugger;\n        if(credentials.role==\"Customers\")\n        {\n            history.push(\"/customer\");\n        }\n        else if(credentials.role==\"Admin\")\n        {\n            history.push(\"/admin\")\n        }\n        else\n        {\n        setmessage(\"credetials are invalid\");\n        }\n        // var helper=new XMLHttpRequest();\n        // helper.onreadystatechange=()=>{\n        //     if(helper.readyState===4 && helper.status===200)\n        //     {\n        //         var responseReceived=JSON.parse(helper.responseText);\n        //         if(responseReceived.isvalid==='true')\n        //         {\n        //             sessionStorage.setItem(\"isloggedin\",true);\n        //             sessionStorage.setItem(\"username\",credentials.username);\n        //             props.setUserName(credentials.username);\n                    \n        //             history.push(\"/\");\n        //         }\n        //         else{\n        //             setmessage(\"credentials are invalid\");\n        //             setcredentials({username:\"\",password:\"\"});\n        //         }\n        //     }\n        // }\n        // helper.open(\"POST\",\"http://127.0.0.1:9999/login\");\n        // helper.setRequestHeader(\"Content-Type\",\"application/json\");\n        // var credentialsInString=JSON.stringify(credentials);\n        // var credentialsInEncoded=window.btoa(credentialsInString);\n        // var details={\"credentials\":credentialsInEncoded}\n        // helper.send(JSON.stringify(details));\n    }\n\n\n\nreturn ( <>\n         {/* <br></br>\n         {/* <div style={{backgroundImage:`url(${image})`}} >\n         */}\n        {/* <div>\n        <div> \n         <center>\n            <table className=\"table table-bordered\">\n                <tbody>\n                    <tr>\n                        <td>\n                            User Name\n                        </td> */}\n                        {/* <td>\n                        <input type=\"text\" placeholder=\"Enter username\"\n                         value={credentials.username}\n                         name='username'\n                         onChange={OnTextChange}/>\n                         </td>\n                    </tr>\n                    <tr>\n                    <td>\n                            Password\n                        </td>\n                        <td>\n                        <input type=\"text\" placeholder=\"Enter password\"\n                         value={credentials.password}\n                         name='password'\n                         onChange={OnTextChange}/> */}\n                         {/* </td>  */}\n                    {/* </tr>\n                    <tr>\n                        <td>\n                            Role\n                        </td>\n                        <td>\n                        <select name=\"role\" onChange={OnTextChange}>\n                                    <option value=\"Select\">Select Role</option>\n                                    <option value={credentials.Customers}>Customers</option>\n                                    <option value={credentials.Admin}>Admin</option>\n                                </select>\n                        </td>\n                   \n                    </tr>\n                    <tr>\n                    <td colSpan={\"2\"}> */}\n                        {/* <button onClick={SignIn} className=\"btn btn-primary\">\n                            Login In\n                        </button>\n\n                     <hr></hr>\n                        {message}\n\n                    </td>\n                    </tr>\n                </tbody>\n            </table>\n         </center>\n         </div>\n         </div> */} \n        \n      \n    \n\n\n\n\n\n </>);\n        \n\n        \n}\nexport default Login;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAO,kDAAkD;AACzD,OAAO,cAAc;AACrB,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,KAAK,MAAM,oBAAoB;AAAC,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAIvC,SAASC,KAAKA,CAACC,KAAK,EACpB;EAAAC,EAAA;EACI,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAACX,QAAQ,CAAC;IAACY,QAAQ,EAAC,EAAE;IAACC,QAAQ,EAAC;EAAE,CAAC,CAAC;EACvE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAACf,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAMgB,OAAO,GAAEf,UAAU,CAAC,CAAC;EAE3BF,SAAS,CAAC,MAAI;IACV,IAAGe,OAAO,KAAG,EAAE,EACf;MACIG,UAAU,CAAC,MAAI;QACXF,UAAU,CAAC,EAAE,CAAC;MAClB,CAAC,EAAC,IAAI,CAAC;IACX;EACJ,CAAC,EAAC,CAACD,OAAO,CAAC,CAAC;EAEZ,MAAMI,YAAY,GAAEC,IAAI,IAAG;IACvB,IAAIC,iBAAiB,GAAC;MAAC,GAAGV;IAAW,CAAC;IACtCU,iBAAiB,CAACD,IAAI,CAACE,MAAM,CAACC,IAAI,CAAC,GAACH,IAAI,CAACE,MAAM,CAACE,KAAK;IACrDZ,cAAc,CAACS,iBAAiB,CAAC;EACrC,CAAC;EAED,MAAMI,MAAM,GAACA,CAAA,KAAI;IAEjB;IACI,IAAGd,WAAW,CAACe,IAAI,IAAE,WAAW,EAChC;MACIT,OAAO,CAACU,IAAI,CAAC,WAAW,CAAC;IAC7B,CAAC,MACI,IAAGhB,WAAW,CAACe,IAAI,IAAE,OAAO,EACjC;MACIT,OAAO,CAACU,IAAI,CAAC,QAAQ,CAAC;IAC1B,CAAC,MAED;MACAX,UAAU,CAAC,wBAAwB,CAAC;IACpC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;;EAIL,oBAAST,OAAA,CAAAF,SAAA,mBAoEN,CAAC;AAIJ;AAACK,EAAA,CAzIQF,KAAK;EAAA,QAIKN,UAAU;AAAA;AAAA0B,EAAA,GAJpBpB,KAAK;AA0Id,eAAeA,KAAK;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}